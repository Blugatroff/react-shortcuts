{"version":3,"file":"react-shortcuts.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React from 'react'\n\ntype UpperCase = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'\ntype LowerCase = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\ntype Alphabet = LowerCase | UpperCase\ntype ShiftNum = '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')'\ntype FKeys = 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12'\ntype SpecialKeys = 'Control' | 'Alt' | 'Backspace' | 'Tab' | 'Shift' | 'Enter' | 'End'\ntype Arrows = 'ArrowUp' | 'ArrowDown' | 'ArrowRight' | 'ArrowLeft'\ntype Key = Alphabet | FKeys | SpecialKeys | Arrows | ShiftNum\n\nclass KeysState {\n  private keys: Map<string, boolean> = new Map()\n\n  public isPressed(key: Key): boolean {\n    return this.keys.get(key) ?? false\n  }\n  public update(e: KeyboardEvent, state: boolean) {\n    this.keys.set(e.key, state)\n  }\n}\n\ntype Listener = (keys: KeysState) => void\nconst listeners: Map<string, Listener[]> = new Map()\n\nconst addListener = (key: Key, listener: Listener): (() => void) => {\n  const listenersOnKey = listeners.get(key) ?? []\n  listeners.set(key, [...listenersOnKey, listener])\n  return () => {\n    const listenersOnKey = listeners.get(key)\n    if (listenersOnKey === undefined) return\n    listeners.set(key, listenersOnKey.filter(f => f !== listener))\n  }\n}\n\nconst keysState = new KeysState()\ndocument.body.onkeydown = e => {\n  keysState.update(e, true)\n  for (const listener of listeners.get(e.key) ?? []) listener(keysState)\n}\ndocument.body.onkeyup = e => keysState.update(e, false)\n\nconst useKey = (key: Key, listener: Listener) =>\n  React.useEffect(\n    () => addListener(key, listener),\n    [listener, key]\n  )\n\nexport const createShortcutHook = (keys: Key[]) => (listener: () => void): void => {\n  useKey(keys[keys.length - 1], React.useMemo(() => state => {\n    for (let i = 0; i < keys.length - 1; i++) {\n      if (!state.isPressed(keys[i])) return\n    }\n    listener()\n  }, [listener]))\n}\n\nexport const anyShortcut = (...hooks: ((listener: (() => void)) => void)[]) => (listener: () => void) => hooks.forEach(h => h(listener))\n"],"names":["KeysState","this","Map","isPressed","key","keys","get","update","e","state","set","listeners","keysState","document","body","onkeydown","listener","onkeyup","hooks","forEach","h","React","useEffect","listenersOnKey","undefined","filter","f","addListener","useKey","length","useMemo","i"],"mappings":"8PAWMA,aAAN,aACUC,UAA6B,IAAIC,+BAElCC,UAAA,SAAUC,SACf,gBAAOH,KAAKI,KAAKC,IAAIF,UAEhBG,OAAA,SAAOC,EAAkBC,GAC9BR,KAAKI,KAAKK,IAAIF,EAAEJ,IAAKK,SAKnBE,EAAqC,IAAIT,IAYzCU,EAAY,IAAIZ,EACtBa,SAASC,KAAKC,UAAY,SAAAP,GACxBI,EAAUL,OAAOC,GAAG,GACpB,ysBAAuBG,EAAUL,IAAIE,EAAEJ,QAAQ,oBAA/C,OAAmDY,WAASJ,KAE9DC,SAASC,KAAKG,QAAU,SAAAT,GAAC,OAAII,EAAUL,OAAOC,GAAG,wBAiBtB,WAAA,2BAAIU,2BAAAA,kBAAJ,OAAoD,SAACF,GAAD,OAA0BE,EAAMC,SAAQ,SAAAC,GAAC,OAAIA,EAAEJ,mCAT5F,SAACX,GAAD,OAAiB,SAACW,IANrC,SAACZ,EAAUY,GACxBK,EAAMC,WACJ,WAAA,OAnBgB,SAAClB,EAAUY,SACvBO,WAAiBZ,EAAUL,IAAIF,MAAQ,GAE7C,OADAO,EAAUD,IAAIN,YAASmB,GAAgBP,KAChC,WACL,IAAMO,EAAiBZ,EAAUL,IAAIF,QACdoB,IAAnBD,GACJZ,EAAUD,IAAIN,EAAKmB,EAAeE,QAAO,SAAAC,GAAC,OAAIA,IAAMV,OAa9CW,CAAYvB,EAAKY,KACvB,CAACA,EAAUZ,IAIbwB,CAAOvB,EAAKA,EAAKwB,OAAS,GAAIR,EAAMS,SAAQ,WAAA,OAAM,SAAArB,GAChD,IAAK,IAAIsB,EAAI,EAAGA,EAAI1B,EAAKwB,OAAS,EAAGE,IACnC,IAAKtB,EAAMN,UAAUE,EAAK0B,IAAK,OAEjCf,OACC,CAACA"}